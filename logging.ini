# Date: Feb 14, 2015


# File containes log configration for console, error & info logs. the level of details
# for console can be controlled by changing the level to DEBUG, INFO, WARNING ERROR or CRITICAL

[loggers]
keys=root,fileLog

# responsible for dispatching the appropriate log messages (based on the log messages’ severity)
# to the handler’s specified destination
[handlers]
keys=consoleHandler,infoHandler,errorHandler

# configure the final order, structure, and contents of the log message
[formatters]
keys=consoleFormatter,fileFormatter

# Set root category priority to INFO & handler to console
[logger_root]
level=INFO
handlers=consoleHandler

# Set log file category priority to INFO & handlers to consoleHandler,infoHandler & errorHandler
[logger_fileLog]
level=INFO
handlers=consoleHandler,infoHandler,errorHandler
qualname=fileLog
propagate=0

# set consol to DEBUG & arguments to capture output
# [If a test or a setup method fails its according captured output will usually be shown along
# with the failure traceback -  stdout & stderr]
[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=consoleFormatter
args=(sys.stdout,)

# set info log to be a File appender
[handler_infoHandler]
class=FileHandler
level=INFO
formatter=fileFormatter
args=('infoLog.log', 'a')

# set error log to be a File appender
[handler_errorHandler]
class=FileHandler
level=ERROR
formatter=fileFormatter
args=('errorLog.log', 'a')

# set console format
[formatter_consoleFormatter]
format=[%(name)s] - %(asctime)s - %(levelname)s - Issue: %(message)s
datefmt=%m-%d-%Y  %H:%M:%S

# set log file format
[formatter_fileFormatter]
format=[%(name)s] - %(asctime)s - Issue: %(message)s
datefmt=%m-%d-%Y  %H:%M:%S
